@model GroupModel
@{
    ViewData["Title"] = "Группа";
}
@{
    string guidValue = Model.Id.ToString();
}

<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white box-shadow mb-3">
        <div class="d-flex flex-grow-1 align-items-center justify-content-between">

            <div class="d-flex justify-content-center">
                <img class="me-1" src="@Url.Content("~/eagle.png")" alt="Орел">
                <div style="font-size: 30px;font-family: 'Montserrat'">@Model.Name</div>
            </div>

            <div class="d-flex justify-content-center align-items-center">
                <div class="dropdown">
                    <a class="btn dropdown-toggle m-1 me-3" id="CurrentName" style="font-size: 26px;" href="#" role="button" 
                        data-bs-toggle="dropdown" aria-expanded="false">
                    </a>
                    <ul class="dropdown-menu m-1 ms-3">
                        <li>
                            <a class="dropdown-item" id="logout" href="@Url.Action("CreateGroup", "Group")">Выйти</a>
                        </li>
                    </ul>
                </div>

                <button type="button" class="btn--blue m-0" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                    Пригласить
                </button>
            </div>
         
        </div>
    </nav>
</header>

<div class="d-flex flex-column m-2 flex-grow-1 justefy-content-center text-center">

    <div class="flex-grow-1 d-flex flex-column align-items-center justify-content-center">

        <div class="d-flex justify-content-center">
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>        
        </div>

        <div class="d-flex align-items-center ">

            <div class="flex-grow-1 d-flex justify-content-end d-flex flex-column card--container">
                <div class="card me-1"></div>
            </div>

            <div style=" position: relative; display: inline-block;">
                <div class="table">
                    <img style=" filter: brightness(-100%);" src="@Url.Content("~/sunny.png")" alt="Солнце">
                </div>
                <div class="m-3 relative">
                    <button class="btn--blue table--button " id="stopBtn">Завершить голосование</button>
                    <div id="average" class="d-none table--button cifra-average"></div>
                    <button class="btn--orange d-none table--bottom " id="againVotingBtn">Голосовать снова</button>
                    <button class="btn--blue d-none table--bottom " id="newVotingBtn">Начать новое голосование</button>
                </div>
            </div>

            <div class="flex-grow-1 card--container">
                <div class="card ms-1"></div>
            </div>

        </div>

        <div class="d-flex justify-content-center">
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>       
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>       
        </div>

    </div>

    <div class="mt-4 d-flex justify-content-between">

        <div class="message--no--consent m-1 d-none">
            Единого мнения о сложности этой задачи нет. Вам нужно обсудить результаты голосования. После обсуждения - повторное голосование.
        </div>

        <div class="card--vote m-1">0</div>
        <div class="card--vote m-1">1</div>
        <div class="card--vote m-1">2</div>
        <div class="card--vote m-1">3</div>
        <div class="card--vote m-1">5</div>
        <div class="card--vote m-1">8</div>
        <div class="card--vote m-1">13</div>
        <div class="card--vote m-1">21</div>
        <div class="card--vote m-1">34</div>
        <div class="card--vote m-1">55</div>
        <div class="card--vote m-1">89</div>
        <div class="card--vote m-1">?</div>
        <div class="card--vote m-1">Кофе</div>
    </div>

     <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Ссылка</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" id="modalCLoseBtn" aria-label="Close"></button>
                </div>

                <div class="d-flex flex-column modal-body">

                    <div id="linkToCopy" class="p-1 m-2 addLink--container">
                        @Model.Link
                    </div>

                    <button type="button" data-clipboard-target="#linkToCopy" id="copyBtn" class="m-2 flex-grow-1 btn--blue">Копировать</button>

                </div>
            </div>
        </div>
    </div>

 </div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.8/clipboard.min.js"></script>
<script>

    let groupId = '@Html.Raw(guidValue)';
    let isVotingStopped = false;
    let usersInGroup = []
    let value = 0;
    let isFullConsent = false;
    let average = 0;
    let currentUsername = {name : "", id : "0"}
    let isVoting = true;

    let stopBtn = document.getElementById("stopBtn")
    let newVotingBtn = document.getElementById("newVotingBtn")
    let againVotingBtn = document.getElementById("againVotingBtn")
    var cardDivs = document.querySelectorAll('.card--vote');
    let messageNotConsent = document.querySelector('.message--no--consent');
    var averageDiv = document.getElementById('average');
    let userCards = document.querySelectorAll(".card--container");
    let cardsVoting = document.querySelectorAll(".card--vote");
    let modalCloseBtn = document.getElementById("modalCLoseBtn")

    document.getElementById("CurrentName").textContent = currentUsername.name

    cardDivs.forEach(function(cardDiv) {
        cardDiv.addEventListener('click', function() {
            if(cardDiv.classList.contains('card--vote--active')) {
                cardDiv.classList.remove('card--vote--active');

                hubConnection.invoke("DeleteVote", groupId, currentUsername.id.toString())
                .catch(function (err) {
                    return console.error(err.toString());
                });

                value = 0;
            }
            else{
                document.querySelector('.card--vote--active')?.classList?.remove('card--vote--active');
                cardDiv.classList.add('card--vote--active');

                
                hubConnection.invoke("SetVote", {"Value" : cardDiv.textContent, "GroupId" : groupId, "Username" : currentUsername.name})
                .catch(function (err) {
                    return console.error(err.toString());
                });

                value = cardDiv.textContent
            }
        });
    });


    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("http://localhost:5010/user")
        .build();
    
    hubConnection.on("FinishVoting", function(usersVote, average, consent) {
        isFullConsent = consent

        if(isFullConsent)
            newVotingBtn.classList.remove("d-none")
        else
        {
            messageNotConsent.classList.remove("d-none")
            againVotingBtn.classList.remove("d-none")
        }

        cardsVoting.forEach(function(card) {
            card.classList.add("d-none");
        });

        averageDiv.textContent = average;
        averageDiv.classList.remove("d-none")

        stopBtn.classList.add("d-none")

        
        userCards.forEach(function(userCard) {
            if(userCard.children[1].textContent != "") {
                userCard.children[0].classList.add("card--add--user--value");
                userCard.children[0].textContent = usersVote?.find(x => x.name == userCard.children[1].textContent)?.value;
            }
        });

    });

    hubConnection.on("StartNewVoting", function() {

        messageNotConsent.classList.add("d-none")

        if(isFullConsent) 
            newVotingBtn.classList.add("d-none")
        else
            againVotingBtn.classList.add("d-none")

        stopBtn.classList.remove("d-none")
        averageDiv.classList.add("d-none")


        cardsVoting.forEach(function(card) {
            card.classList.remove("d-none");
        });

        userCards.forEach(function(userCard) {
            if(userCard.children[1].textContent != "") {
                userCard.children[0].classList.remove("card--add--user--value");
                userCard.children[0].textContent = "";
            }
        });

    });

    hubConnection.on("Logout", function(userId) {
        
        let deleteUser = usersInGroup.find(user => user.id == userId); 

        usersInGroup = usersInGroup.filter(user => user.id != userId);

        for(let i = 0; i < userCards.length; i++) {

            if(userCards[i]?.children[1]?.textContent == deleteUser.name) {
                userCards[i].children[0].classList.remove("card--add--user");
                userCards[i].children[1].remove()
            }
        }
    });

    hubConnection.on("UserAdded", function(users, statusGroup) {

        if(currentUsername.name === "") {
            currentUsername = users[users.length - 1]
            document.getElementById("CurrentName").textContent = currentUsername.name ;
        }   

        for(let i = 0; i < users.length; i++) {

            if(!usersInGroup.some(user => user.id === users[i].id)) {
                usersInGroup.push(users[i]);

                let messageElement = document.createElement("p");
                messageElement.textContent = users[i].name ;
                
                for(let j = 0; j < userCards.length; j++) {

                    if(userCards[j].childElementCount === 1) {
                        userCards[j].appendChild(messageElement);
                        userCards[j].children[0].classList.add("card--add--user");
                        break 
                    }
                }
            }
        }
    });

    document.getElementById("logout").addEventListener("click", function () {
        hubConnection.invoke("Logout", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });

    });

    newVotingBtn.addEventListener("click", function () {
        hubConnection.invoke("StartNewVoting", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });
    });

    againVotingBtn.addEventListener("click", function () {
        hubConnection.invoke("StartNewVoting", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });
    });

    stopBtn.addEventListener("click", function () {
        hubConnection.invoke("FinishVoting", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });
    });

    window.onbeforeunload = function() {
        hubConnection.invoke("CloseGroup", groupId)
        .catch(function (err) {
            return console.error(err.toString());
        });
    }

    hubConnection.start()
        .then(function () {
            hubConnection.invoke("CreateGroup", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });
        })
        .catch(function (err) {
            return console.error(err.toString());
        });



    var clipboard = new ClipboardJS('#copyBtn');

    clipboard.on('success', function(e) {
        e.clearSelection();

        var copyBtn = document.getElementById("copyBtn");
        copyBtn.classList.add("btn--blue--clicked")
        copyBtn.textContent = "Скопированно"
    });


    
</script>
