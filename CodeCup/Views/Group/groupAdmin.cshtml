@using Новая_папка.Components

@model GroupModel

@{
    ViewData["Title"] = "Группа";

    int role = Convert.ToInt32(Model.Role);

    string guidValue = Model.Id.ToString();
    string[] cardsKey = Model.CardsKey.Select(x => x.Key).ToArray();
}

@await Html.PartialAsync("Header", Model.Name)


<div class="d-flex flex-column m-2 flex-grow-1 justefy-content-center text-center">

    <div class="flex-grow-1 d-flex flex-column align-items-center justify-content-center">

        <div class="d-flex justify-content-center">
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>        
        </div>

        <div class="d-flex align-items-center ">

            <div class="flex-grow-1 d-flex justify-content-end d-flex flex-column card--container">
                <div class="card me-1"></div>
            </div>

            <div style=" position: relative; display: inline-block;">
                <div class="table">
                    <img style=" filter: brightness(-100%);" src="@Url.Content("~/sunny.png")" alt="Солнце">
                </div>
                <div class="m-3 relative">
                    <button class="btn--blue table--button " id="stopBtn">Завершить голосование</button>
                    <div id="average" class="d-none table--button cifra-average"></div>
                    <button class="btn--orange d-none table--bottom " id="againVotingBtn">Голосовать снова</button>
                    <button class="btn--blue d-none table--bottom " id="newVotingBtn">Начать новое голосование</button>
                </div>
            </div>

            <div class="flex-grow-1 card--container">
                <div class="card ms-1"></div>
            </div>

        </div>

        <div class="d-flex justify-content-center">
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>       
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>       
        </div>

    </div>

    <div class="mt-4">

        <div class="message--no--consent m-1 d-none">
            Единого мнения о сложности этой задачи нет. Вам нужно обсудить результаты голосования. После обсуждения - повторное голосование.
        </div>

        @CardsDisplayer.Invoke(cardsKey)

    </div>

    @await Html.PartialAsync("ModalLink", Model.Link)
    @await Html.PartialAsync("ModalHistory", "historyBody")
    @await Html.PartialAsync("ModalChooseNameAndSpectator", 
        new ChooseNameAndSpectatorModel() 
            {
                Id="staticChooseNameAndSeparator",
                IdBtn="chooseNameAndSpectatorBtn",
                IdField="usernameField",
                ChooseName = true,
                ChooseSpectator = true
            })
    @await Html.PartialAsync("ModalChooseNameAndSpectator", 
        new ChooseNameAndSpectatorModel() 
        {
            Id="staticChooseName",
            IdBtn="chooseNameBtn",
            IdField="newUsernameField",
            ChooseName = true, 
            ChooseSpectator = false
        })

 </div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.8/clipboard.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/davidshimjs/qrcodejs/qrcode.min.js"></script>
<script>

    const Roles = {
        Admin: 0,
        User: 1
    }

    const StatusGroup = {
        Stopped: 0,
        Active: 1
    }

    const UserRoleInGroup = {
        Spectator : 0,
        Participant : 1
    }

    let isFullConsent = false;
    let votingStatus;

    let average = 0;

    let groupId = "@Html.Raw(guidValue)";

    let cardSet = @Html.Raw(Json.Serialize(Model.CardsKey));

    let usersInGroup = []

    let CurrentUser = {name : "", id : 0, isSpectator : 1, role : 1}

    let historyBody = document.getElementById("historyBody");
    let stopBtn = document.getElementById("stopBtn")
    let newVotingBtn = document.getElementById("newVotingBtn")
    let againVotingBtn = document.getElementById("againVotingBtn")
    let modalCloseBtn = document.getElementById("modalCLoseBtn")
    let chooseNameAndSpectatorBtn = document.getElementById('chooseNameAndSpectatorBtn')
    let chooseNameBtn = document.getElementById('chooseNameBtn')
    let historyBtn = document.getElementById("history")
    let logoutBtn = document.getElementById('logout')

    let usernameField = document.getElementById('usernameField')
    let isSpectatorField = document.getElementById('isSpectatorField')
    let isSpectatorFieldMain = document.getElementById('isSpectatorFieldMain')
    let newUsernameField = document.getElementById('newUsernameField')
    let currentNameMainField = document.getElementById("CurrentName")

    let messageNotConsent = document.querySelector('.message--no--consent');

    let averageDiv = document.getElementById('average');
    let usernameDropdown = document.getElementById('usernameDropdownItem')

    let userCards = document.querySelectorAll(".card--container");
    let cardsVoting = document.querySelectorAll(".card--vote");


    currentNameMainField.textContent = CurrentUser.name


    //Создание событий обработки клика на карточки голосов
    cardsVoting.forEach(function(card) {
        card.addEventListener('click', function() {
            if(card.classList.contains('card--vote--active')) {
                card.classList.remove('card--vote--active');

                deleteVote(CurrentUser.id)
            }
            else{
                document.querySelector('.card--vote--active')?.classList?.remove('card--vote--active');
                card.classList.add('card--vote--active');

                
                setVote(card.textContent, cardSet.find(x => x.key == card.textContent).value.toString(), groupId, CurrentUser.id)
            }
        });
    });


    isSpectatorFieldMain.addEventListener("change", function () {
        if(isSpectatorFieldMain.checked) {
            CurrentUser.isSpectator  = UserRoleInGroup.Spectator
            if(votingStatus == StatusGroup.Stopped) {
                deleteVote(CurrentUser.id)
            }
            hideVotingCard()
            deleteActiveFromCard()
        } else {
            CurrentUser.isSpectator = UserRoleInGroup.Participant
            if(votingStatus == StatusGroup.Active) {
                showVotingCard()
            }
        }

        showUserDependingRole(CurrentUser.name, CurrentUser.isSpectator)

        hubConnection.invoke("ChooseNameAndSeparator", groupId, CurrentUser.id.toString(), CurrentUser.name, CurrentUser.isSpectator.toString())
            .catch(function (err) {
                return console.error(err.toString());
            });
            
        console.log("Change Name and isSpectator")
    })

    usernameDropdownItem.addEventListener("click", function () {
        $('#staticChooseName').modal("show")
    })

    logoutBtn.addEventListener("click", function () {

        hubConnection.invoke("Logout", groupId, CurrentUser.id.toString())
            .catch(function (err) {
                return console.error(err.toString());
            });

        if(CurrentUser.role == Roles.Admin) {
            hubConnection.invoke("CloseGroup", groupId)
                .catch(function (err) {
                    return console.error(err.toString());
                });
        }
    });

    newVotingBtn.addEventListener("click", function () {
        hubConnection.invoke("StartNewVoting", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });
    });

    againVotingBtn.addEventListener("click", function () {
        hubConnection.invoke("StartNewVoting", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });
    });

    stopBtn.addEventListener("click", function () {
        hubConnection.invoke("FinishVoting", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });
    });

    chooseNameBtn.addEventListener("click", function () {
        let newUsername = newUsernameField.value

        console.log(CurrentUser)

        hubConnection.invoke("ChooseNameAndSeparator", groupId, CurrentUser.id.toString(), newUsername, CurrentUser.isSpectator.toString())
            .catch(function (err) {
                return console.error(err.toString());
            });

        $('#chooseNameModal').modal('toggle');
    });

    chooseNameAndSpectatorBtn.addEventListener("click", function () {

        let newUsername = usernameField.value

        if (isSpectatorField.checked ) {
            CurrentUser.spectator = UserRoleInGroup.Spectator
            hideVotingCard()
            deleteVote(CurrentUser.id)
        }
        else {
            CurrentUser.spectator = UserRoleInGroup.Participant
            showVotingCard()
        }

        hubConnection.invoke("ChooseNameAndSeparator", groupId, CurrentUser.id.toString(), newUsername, CurrentUser.isSpectator.toString())
            .catch(function (err) {
                return console.error(err.toString());
            });

        $('#staticChooseNameAndSeparator').modal('toggle');
    });


    var clipboard = new ClipboardJS('#copyBtn');

    clipboard.on('success', function(e) {
        e.clearSelection();

        var copyBtn = document.getElementById("copyBtn");
        copyBtn.classList.add("btn--blue--clicked")
        copyBtn.textContent = "Скопированно"
    });


    window.onbeforeunload = function() {

        hubConnection.invoke("Logout", groupId, currentUsername.id.toString())
            .catch(function (err) {
                return console.error(err.toString());
            })

        if(CurrentUser.role == Roles.Admin)
            hubConnection.invoke("CloseGroup", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });
    }
    window.addEventListener('load', function() {
        $('#staticChooseNameAndSeparator').modal('show');
    });



    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("http://localhost:5010/user")
        .build();

    hubConnection.on("FinishVoting", function(usersVote, average, consent) {
        isFullConsent = consent
        votingStatus = StatusGroup.Stopped

        if(CurrentUser.role == Roles.Admin) {
            if(isFullConsent)
                newVotingBtn.classList.remove("d-none")
            else
                againVotingBtn.classList.remove("d-none")

            stopBtn.classList.add("d-none")
        }

        if(!isFullConsent) {
            messageNotConsent.classList.remove("d-none")
        }

        console.log(usersVote[0])

        let historyItem = document.createElement("p");
        historyItem.textContent = "Average : " + average + " / "
        usersVote.forEach( function(item) {
             historyItem.textContent += item.name + " " + item.key + "; "
        })
        historyBody.appendChild(historyItem)

        hideVotingCard()
        deleteActiveFromCard()

        averageDiv.textContent = average;
        averageDiv.classList.remove("d-none")
        
        showValueOnUserCard(userCards, usersVote)

    });

    hubConnection.on("StartNewVoting", function() {

        votingStatus = StatusGroup.Active

        messageNotConsent.classList.add("d-none")

        if(CurrentUser.role == Roles.Admin) {
            stopBtn.classList.remove("d-none")

            if(isFullConsent)
                newVotingBtn.classList.add("d-none")
            else
                againVotingBtn.classList.add("d-none")
        }

        averageDiv.classList.add("d-none")

        showVotingCard()

        resetValueFromUserCard()
    });

    hubConnection.on("Logout", function(userId) {
        //TODO Видимо, когда выходит сам пользователь, то происходит ошибка в for.  
        // И потому происходит перезагрузка страницы
        let deleteUser = usersInGroup.find(user => user.id == userId); 

        usersInGroup = usersInGroup.filter(user => user.id != userId);

        for(let i = 0; i < userCards.length; i++) {

            if(userCards[i]?.children[1]?.textContent == deleteUser.name) {
                userCards[i].children[0].classList.remove("card--add--user");
                userCards[i].children[1].remove()
            }
        }
    });

    //TODO Можно выдавать сообщение, а не перезагружать страницу
    hubConnection.on("CloseGroup", function() {
        
        window.location.reload();
    });

    hubConnection.on("UserChangeNameAndSeparator", function(userId, newUsername, newIsSpectator) {
        let userUpadated = usersInGroup.find(user => user.id == userId);
        let index = usersInGroup.indexOf(userUpadated);

        let oldName = usersInGroup[index].name
        usersInGroup[index].name = newUsername;
        usersInGroup[index].isSpectator = newIsSpectator;

        if(userId == CurrentUser.id) {
            currentNameMainField.textContent = newUsername
            CurrentUser.name = newUsername;
            usernameDropdown.textContent = newUsername
            usernameDropdownItem.textContent = newUsername
        }
        //Логика изменения карточки на "Наблюдатель" и изменение имени
        for(let i = 0; i < userCards.length; i++) {
            
            if(userCards[i].children[1].textContent == oldName) {
                userCards[i].children[1].textContent = newUsername
                break;
            } 
        }
        showUserDependingRole(newUsername, newIsSpectator)
    });

    hubConnection.on("UserAdded", function(users, statusGroup) {
        console.log(users)
        votingStatus = statusGroup

         if(CurrentUser.name === "") {
            CurrentUser = users[users.length - 1]
            document.getElementById("CurrentName").textContent = CurrentUser.name ;

            usernameField.value = CurrentUser.name
            newUsernameField.value = CurrentUser.name

            usernameDropdownItem.textContent = CurrentUser.name
        }   

        if (statusGroup == StatusGroup.Stopped) {
            hideVotingCard();
        }


        for(let i = 0; i < users.length; i++) {

            if(!usersInGroup.some(user => user.id === users[i].id)) {
                usersInGroup.push(users[i]);

                let messageElement = document.createElement("p");
                messageElement.textContent = users[i].name ;
                
                //Отображение пользователей в группе в карточках
                for(let j = 0; j < userCards.length; j++) {

                    if(userCards[j].childElementCount === 1) {
                        userCards[j].appendChild(messageElement);

                        showUserDependingRole(users[i].name, users[i].isSpectator)
                        break 
                    }
                }
            }
        }
    });

    hubConnection.start()
    .then(function () {

        if(@role == Roles.Admin)
            hubConnection.invoke("CreateGroup", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            })
        else {
            hubConnection.invoke("JoinGroupFromLink", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });

            stopBtn.classList.add("d-none")
        }
    }) 
    .catch(function (err) {
        return console.error(err.toString());
    })  

    //Показ карточек голоса у участника
    function showVotingCard() {
        if(CurrentUser.isSpectator == UserRoleInGroup.Participant) {
            cardsVoting.forEach(function(card) {
                card.classList.remove("d-none");
            });   
        }
    }

    function deleteVote(userId) {

        console.log(userId)

        hubConnection.invoke("DeleteVote", userId.toString())
        .catch(function (err) {
            return console.error(err.toString());
        });
    }

    function deleteActiveFromCard() {
        cardsVoting.forEach(function(card) {
            if(card.classList.contains('card--vote--active')) {
                card.classList.remove('card--vote--active');
            }
        });
    }

    function setVote(key, value, _groupId, userId) {

        hubConnection.invoke("SetVote", {Value : value.toString(), Key : key, GroupId : _groupId.toString(), UserId :  userId})
            .catch(function (err) {
                return console.error(err.toString());
            });
    }

    function hideVotingCard() {
        cardsVoting.forEach(function(card) {
            card.classList.add("d-none");
        });
    }

    function resetValueFromUserCard() {
        userCards.forEach(function(userCard) {
            if(userCard.children[1].textContent != "") {
                userCard.children[0].classList.remove("card--add--user--value");
                userCard.children[0].textContent = "";
            }
        });
    }

    function showValueOnUserCard(userCards, usersVote) {
        userCards.forEach(function(userCard) {
            if(userCard.children[1].textContent != "") {
                userCard.children[0].classList.add("card--add--user--value");
                userCard.children[0].textContent = usersVote?.find(x => x.name == userCard.children[1].textContent)?.key;
            }
        });
    }

    const qrcode = new QRCode(document.getElementById('qrcode'), {
        text: "@Html.Raw(@Model.Link)",
        width: 164,
        height: 164,
        colorDark : '#000',
        colorLight : '#fff',
        correctLevel : QRCode.CorrectLevel.H
    });

    //А не скрывает карточку
    function showUserDependingRole(username, userRoleInGroup) {

        console.log("CreateUserCardToShower : " + username + " " + userRoleInGroup)
        for(let i = 0; i < userCards.length; i++) {

            if(userCards[i].children[1].textContent == username) {
                if(userRoleInGroup == UserRoleInGroup.Spectator) {
                    userCards[i].children[0].classList.remove("card--add--user");
                    userCards[i].children[0].classList.add("card--add--user--shower");

                }
                if(userRoleInGroup == UserRoleInGroup.Participant) {
                    userCards[i].children[0].classList.add("card--add--user");
                    userCards[i].children[0].classList.remove("card--add--user--shower");
                }

                break
            }
        }
    }
        
    
</script>
