@model GroupModel
@{
    ViewData["Title"] = "Группа";
}
@{
    string guidValue = Model.Id;
}



<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white box-shadow mb-3">
        <div class="d-flex flex-grow-1 align-items-center justify-content-between">

            <div class="d-flex justify-content-center">
                <img class="me-1" src="@Url.Content("~/eagle.png")" alt="Орел">
                <div style="font-size: 30px;font-family: 'Montserrat'">@Model.Name</div>
            </div>

            <div class="d-flex justify-content-center align-items-center">

                <label class="form-check-label m-2 fs-4">Наблюдатель</label>

                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="isSpectatorFieldMain">
                </div>

                <div class="dropdown">
                    <a class="btn dropdown-toggle m-1 me-3" id="CurrentName" style="font-size: 26px;" href="#" role="button" 
                        data-bs-toggle="dropdown" aria-expanded="false">
                    </a>
                    <ul class="dropdown-menu m-1 ms-3">
                        <li>
                            <div class="dropdown-item" id="usernameDropdownItem">
                                <div class="d-flex justify-content-between">
                                    <p></p>
                                    <img src="@Url.Content("~/changeNameIcon.png")" alt="изменить имя">
                                </div>
                            </div>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item" id="logout" href="#">Выйти</a>
                        </li>
                    </ul>
                </div>

                <button type="button" class="btn--blue m-0" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                    Пригласить
                </button>

                <div id="history" class="ms-3"><img  src="@Url.Content("~/History.png")" alt="История"/></div>
            </div>
         
        </div>
    </nav>
</header>

<div class="d-flex flex-column m-2 flex-grow-1 justefy-content-center text-center">

    <div class="flex-grow-1 d-flex flex-column align-items-center justify-content-center">

        <div class="d-flex justify-content-center">
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>        
        </div>

        <div class="d-flex align-items-center ">

            <div class="flex-grow-1 d-flex justify-content-end d-flex flex-column card--container">
                <div class="card me-1"></div>
            </div>

            <div style=" position: relative; display: inline-block;">
                <div class="table">
                    <img style=" filter: brightness(-100%);" src="@Url.Content("~/sunny.png")" alt="Солнце">
                </div>
                <div class="m-3 relative">
                    <div id="average" class="d-none table--button cifra-average"></div>
                </div>
            </div>

            <div class="flex-grow-1 card--container">
                <div class="card ms-1"></div>
            </div>

        </div>

       <div class="d-flex justify-content-center">
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>       
            <div class="card--container">
                <div class="card cirle--margin"></div>
            </div>       
        </div>

    </div>

    <div class="mt-4 d-flex justify-content-between">

        <div class="message--no--consent m-1 d-none">
            Единого мнения о сложности этой задачи нет. Вам нужно обсудить результаты голосования. После обсуждения - повторное голосование.
        </div>

        <div class="card--vote m-1">0</div>
        <div class="card--vote m-1">1</div>
        <div class="card--vote m-1">2</div>
        <div class="card--vote m-1">3</div>
        <div class="card--vote m-1">5</div>
        <div class="card--vote m-1">8</div>
        <div class="card--vote m-1">13</div>
        <div class="card--vote m-1">21</div>
        <div class="card--vote m-1">34</div>
        <div class="card--vote m-1">55</div>
        <div class="card--vote m-1">89</div>
        <div class="card--vote m-1">?</div>
        <div class="card--vote m-1">Кофе</div>
    </div>

</div>

<div class="modal fade" id="staticBackdrop" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-center">

            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Ссылка</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="d-flex flex-column modal-body">

                <div id="linkToCopy" class="p-1 m-2 addLink--container">
                    @Model.Link
                </div>

                <button type="button" data-clipboard-target="#linkToCopy" id="copyBtn" class="m-2 flex-grow-1 btn--blue">Копировать</button>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="staticChooseNameAndSeparator" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Выберете имя</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="d-flex flex-column modal-body">
                
                <label class="mb-2 m-2 p-1">Имя</label>
                <input id="nameField" type="text" class="p-1 m-2 addLink--container"/>

                <div class="m-2 d-flex justify-content-between">
                    <div>Присоединиться как наблюдатель</div>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" role="switch" id="isSpectatorField">
                    </div>
                </div>

                <button type="button" data-clipboard-target="#linkToCopy" id="chooseNameAndSpectatorBtn" class="m-2 flex-grow-1 btn--blue">Продолжить</button>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="staticChooseName" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content ">

            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Выберете имя</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="d-flex justify-content-start flex-column modal-body">

                <label class="m-2 p-1">Введите новое имя</label>
                <input id="newUsernameField" type="text" class="p-1 m-2 addLink--container"/>

                <button type="button" data-clipboard-target="#linkToCopy" id="chooseNameBtn" class="m-2 flex-grow-1 btn--blue">Изменить</button>

            </div>
        </div>
    </div>
</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.8/clipboard.min.js"></script>
<script>
    let isFullConsent = false;
    let groupId = "@Html.Raw(guidValue)";
    let currentUsername = {name : "" , id : 0, spectator : 1}
    let messageNotConsent = document.querySelector('.message--no--consent');
    var cardDivs = document.querySelectorAll('.card--vote');
    let cardsVoting = document.querySelectorAll(".card--vote");
    let value = 0;
    var averageDiv = document.getElementById('average');
    var logoutBtn = document.getElementById('logout');
    let usersInGroup = []
    let userCards = document.querySelectorAll(".card--container");
    let usernameField = document.getElementById("nameField");
    let isSpectatorField = document.getElementById('isSpectatorField')
    let isSpectatorFieldMain = document.getElementById('isSpectatorFieldMain')
    let chooseNameBtn = document.getElementById('chooseNameBtn')
    let usernameDropdown = document.getElementById('usernameDropdownItem')
    let chooseNameAndSpectatorBtn = document.getElementById('chooseNameAndSpectatorBtn')
    let chooseNameModal = document.getElementById('staticChooseName')
    let newUsernameField = document.getElementById('newUsernameField')
    let currentNameMainField = document.getElementById("CurrentName")
    
    cardDivs.forEach(function(cardDiv) {
        cardDiv.addEventListener('click', function() {
            if(cardDiv.classList.contains('card--vote--active')) {
                cardDiv.classList.remove('card--vote--active');

                hubConnection.invoke("DeleteVote", groupId, currentUsername.id.toString())
                .catch(function (err) {
                    return console.error(err.toString());
                });
                value = 0;
            }
            else{
                document.querySelector('.card--vote--active')?.classList?.remove('card--vote--active');
                cardDiv.classList.add('card--vote--active');
                value = cardDiv.textContent

                hubConnection.invoke("SetVote", {"Value" : cardDiv.textContent, "GroupId" : groupId, "Username" : currentUsername.name})
                .catch(function (err) {
                    return console.error(err.toString());
                });
            }
        });
    });

    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("http://localhost:5010/user")
        .build();

    
    logoutBtn.addEventListener("click", function() {

        hubConnection.invoke("Logout", groupId, currentUsername.id.toString())
        .catch(function (err) {
            return console.error(err.toString());
        });
        window.location.href = "/Group/CreateGroup";
    })

    isSpectatorFieldMain.addEventListener("change", function () {
        if(isSpectatorFieldMain.checked) {
            currentUsername.spectator = 0

            for(let j = 0; j < userCards.length; j++) {

                userCards[j].children[0].classList.remove("card--add--user");

                if(userCards[j].childElementCount === 2) {
                    userCards[j].children[0].classList.add("card--add--user--shower");
                }

                 cardsVoting.forEach(function(card) {
                    card.classList.add("d-none");
                });
            }

        } else {
            currentUsername.spectator = 1

            for(let j = 0; j < userCards.length; j++) {
                if(userCards[j].childElementCount === 2) {
                    userCards[j].children[0].classList.remove("card--add--user--shower");
                    userCards[j].children[0].classList.add("card--add--user");
                }
            }

             cardsVoting.forEach(function(card) {
                card.classList.remove("d-none");
            });
        }

        hubConnection.invoke("ChooseNameAndSeparator", groupId, currentUsername.id.toString(), currentUsername.name, currentUsername.spectator.toString())
            .catch(function (err) {
                return console.error(err.toString());
            });
    })


    chooseNameAndSpectatorBtn.addEventListener("click", function () {

        let newUsername = usernameField.value

        if (isSpectatorField.checked)
            currentUsername.spectator = 0
        else 
            currentUsername.spectator = 1

        hubConnection.invoke("ChooseNameAndSeparator", groupId, currentUsername.id.toString(), newUsername, currentUsername.spectator.toString())
            .catch(function (err) {
                return console.error(err.toString());
            });

        $('#staticChooseNameAndSeparator').modal('toggle');
    });

    chooseNameBtn.addEventListener("click", function () {
        let newUsername = newUsernameField.value

        console.log(currentUsername.spectator)

        hubConnection.invoke("ChooseNameAndSeparator", groupId, currentUsername.id.toString(), newUsername, currentUsername.spectator.toString())
            .catch(function (err) {
                return console.error(err.toString());
            });

        $('#staticChooseName').modal('toggle');
    });

    usernameDropdownItem.addEventListener("click", function () {
        $('#staticChooseName').modal("show")
    })

    hubConnection.on("StartNewVoting", function() {
        messageNotConsent.classList.add("d-none");
        averageDiv.classList.add("d-none")
        cardsVoting.forEach(function(card) {
            card.classList.remove("d-none");
        });

        userCards.forEach(function(userCard) {
            if(userCard.children[1].textContent != "") {
                userCard.children[0].classList.remove("card--add--user--value");
                userCard.children[0].textContent = "";
            }
        });
     
    });
    hubConnection.on("FinishVoting", function(usersVote, average, consent) {

        isFullConsent = consent;

        if(!isFullConsent) 
            messageNotConsent.classList.remove("d-none");

        cardsVoting.forEach(function(card) {
            card.classList.add("d-none");
        });

        averageDiv.textContent = average;
        averageDiv.classList.remove("d-none")

        userCards.forEach(function(userCard) {
            if(userCard.children[1].textContent != "") {
                userCard.children[0].classList.add("card--add--user--value");
                userCard.children[0].textContent = usersVote?.find(x => x.name == userCard.children[1].textContent)?.value;
            }
        });
     
    });

     hubConnection.on("UserChangeName", function(userId, newUsername, newIsSpectator) {
        let userUpadated = usersInGroup.find(user => user.id == userId);
        let index = usersInGroup.indexOf(userUpadated);
        
        let oldName = usersInGroup[index].name
        usersInGroup[index].name = newUsername;

        if(userId == currentUsername.id) {
            currentNameMainField.textContent = newUsername
            currentUsername.name = newUsername;
            usernameDropdown.textContent = newUsername
            usernameDropdownItem.textContent = newUsername
        }

        for(let i = 0; i < userCards.length; i++) {
            console.log(userCards[i].children[1].textContent == oldName)
            if(userCards[i].children[1].textContent == oldName) {
                userCards[i].children[1].textContent = newUsername
                break;
            } 
        }
    });


    hubConnection.on("UserAdded", function(users, statusGroup) {

        if(currentUsername.name === "") {
            currentUsername = users[users.length - 1]
            currentNameMainField.textContent = currentUsername.name ;

            usernameField.value = currentUsername.name

            usernameDropdownItem.textContent = currentUsername.name

            console.log("Status is " + statusGroup)

            if(statusGroup == 0) {
                cardsVoting.forEach(function(card) {
                    card.classList.add("d-none");
                });

            }
        }   

        for(let i = 0; i < users.length; i++) {

            if(!usersInGroup.some(user => user.id === users[i].id)) {
                usersInGroup.push(users[i]);

                let messageElement = document.createElement("p");
                messageElement.textContent = users[i].name ;
                
                for(let j = 0; j < userCards.length; j++) {

                    if(userCards[j].childElementCount === 1) {
                        userCards[j].appendChild(messageElement);
                        userCards[j].children[0].classList.add("card--add--user");
                        break 
                    }
                }
            }
        }
    });

    hubConnection.on("Logout", function(userId) {

        let deleteUser = usersInGroup.find(user => user.id == userId); 

        usersInGroup = usersInGroup.filter(user => user.id != userId);

        for(let i = 0; i < userCards.length; i++) {

            if(userCards[i]?.children[1]?.textContent == deleteUser.name) {
                userCards[i].children[0].classList.remove("card--add--user");
                userCards[i].children[1].remove()
            }
        }
    });

    hubConnection.on("CloseGroup", function(username) {
        window.location.href = '/Error/GroupClosed';
    });

     window.onbeforeunload = function() {
         hubConnection.invoke("Logout", groupId, currentUsername.id.toString())
        .catch(function (err) {
            return console.error(err.toString());
        });
    }

    window.addEventListener('load', function() {
        $('#staticChooseNameAndSeparator').modal('show');
    });


    hubConnection.start()
        .then(function () {
            hubConnection.invoke("JoinGroupFromLink", groupId)
            .catch(function (err) {
                return console.error(err.toString());
            });
        })
        .catch(function (err) {
            return console.error(err.toString());
        });


    var clipboard = new ClipboardJS('#copyBtn');

    clipboard.on('success', function(e) {
        e.clearSelection();

        var copyBtn = document.getElementById("copyBtn");
        copyBtn.classList.add("btn--blue--clicked")
        copyBtn.textContent = "Скопированно"
    });
    
</script>
